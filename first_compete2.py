# make all necessary imports

from flask import Flask, json
import mysql.connector
from web3 import Web3
from secrets import token_bytes
from coincurve import PublicKey
from sha3 import keccak_256
import smtplib

# ---------Note all sql functionality has been commented out for demo purposes---------------
# connect to web3 api
email="th.0hackathon@protonmail.com"
node_provider = "http://127.0.0.1:7545"
contract_abi = json.loads("""[
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "name_",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "symbol_",
				"type": "string"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Approval",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "value",
				"type": "uint256"
			}
		],
		"name": "Transfer",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "owner",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			}
		],
		"name": "allowance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "approve",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "account",
				"type": "address"
			}
		],
		"name": "balanceOf",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "created",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "decimals",
		"outputs": [
			{
				"internalType": "uint8",
				"name": "",
				"type": "uint8"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "subtractedValue",
				"type": "uint256"
			}
		],
		"name": "decreaseAllowance",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "spender",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "addedValue",
				"type": "uint256"
			}
		],
		"name": "increaseAllowance",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "name",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "symbol",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "totalSupply",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transfer",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "from",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "to",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "transferFrom",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]
		
	""")
contract_bytecode = """608060405260006003553480156200001657600080fd5b50604051620016543803806200165483398181016040528101906200003c9190620001a4565b81600490805190602001906200005492919062000076565b5080600590805190602001906200006d92919062000076565b505050620003ad565b8280546200008490620002be565b90600052602060002090601f016020900481019282620000a85760008555620000f4565b82601f10620000c357805160ff1916838001178555620000f4565b82800160010185558215620000f4579182015b82811115620000f3578251825591602001919060010190620000d6565b5b50905062000103919062000107565b5090565b5b808211156200012257600081600090555060010162000108565b5090565b60006200013d620001378462000252565b62000229565b9050828152602081018484840111156200015c576200015b6200038d565b5b6200016984828562000288565b509392505050565b600082601f83011262000189576200018862000388565b5b81516200019b84826020860162000126565b91505092915050565b60008060408385031215620001be57620001bd62000397565b5b600083015167ffffffffffffffff811115620001df57620001de62000392565b5b620001ed8582860162000171565b925050602083015167ffffffffffffffff81111562000211576200021062000392565b5b6200021f8582860162000171565b9150509250929050565b60006200023562000248565b9050620002438282620002f4565b919050565b6000604051905090565b600067ffffffffffffffff82111562000270576200026f62000359565b5b6200027b826200039c565b9050602081019050919050565b60005b83811015620002a85780820151818401526020810190506200028b565b83811115620002b8576000848401525b50505050565b60006002820490506001821680620002d757607f821691505b60208210811415620002ee57620002ed6200032a565b5b50919050565b620002ff826200039c565b810181811067ffffffffffffffff8211171562000321576200032062000359565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61129780620003bd6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461019157806370a08231146101c157806395d89b41146101f1578063a457c2d71461020f578063a9059cbb1461023f578063dd62ed3e1461026f576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce56714610155578063325a19f114610173575b600080fd5b6100c161029f565b6040516100ce9190610d58565b60405180910390f35b6100f160048036038101906100ec9190610ba2565b610331565b6040516100fe9190610d3d565b60405180910390f35b61010f610354565b60405161011c9190610e5a565b60405180910390f35b61013f600480360381019061013a9190610b4f565b61035e565b60405161014c9190610d3d565b60405180910390f35b61015d61038d565b60405161016a9190610e75565b60405180910390f35b61017b610396565b6040516101889190610e5a565b60405180910390f35b6101ab60048036038101906101a69190610ba2565b61039c565b6040516101b89190610d3d565b60405180910390f35b6101db60048036038101906101d69190610ae2565b6103d3565b6040516101e89190610e5a565b60405180910390f35b6101f961041b565b6040516102069190610d58565b60405180910390f35b61022960048036038101906102249190610ba2565b6104ad565b6040516102369190610d3d565b60405180910390f35b61025960048036038101906102549190610ba2565b610524565b6040516102669190610d3d565b60405180910390f35b61028960048036038101906102849190610b0f565b610547565b6040516102969190610e5a565b60405180910390f35b6060600480546102ae90610f8a565b80601f01602080910402602001604051908101604052809291908181526020018280546102da90610f8a565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b5050505050905090565b60008061033c6105ce565b90506103498185856105d6565b600191505092915050565b6000600254905090565b6000806103696105ce565b90506103768582856107a1565b61038185858561082d565b60019150509392505050565b60006012905090565b60035481565b6000806103a76105ce565b90506103c88185856103b98589610547565b6103c39190610eac565b6105d6565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606005805461042a90610f8a565b80601f016020809104026020016040519081016040528092919081815260200182805461045690610f8a565b80156104a35780601f10610478576101008083540402835291602001916104a3565b820191906000526020600020905b81548152906001019060200180831161048657829003601f168201915b5050505050905090565b6000806104b86105ce565b905060006104c68286610547565b90508381101561050b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050290610e3a565b60405180910390fd5b61051882868684036105d6565b60019250505092915050565b60008061052f6105ce565b905061053c81858561082d565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610646576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063d90610e1a565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156106b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ad90610d9a565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107949190610e5a565b60405180910390a3505050565b60006107ad8484610547565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108275781811015610819576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081090610dba565b60405180910390fd5b61082684848484036105d6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561089d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089490610dfa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561090d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090490610d7a565b60405180910390fd5b610918838383610aae565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099590610dda565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a319190610eac565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610a959190610e5a565b60405180910390a3610aa8848484610ab3565b50505050565b505050565b505050565b600081359050610ac781611233565b92915050565b600081359050610adc8161124a565b92915050565b600060208284031215610af857610af761101a565b5b6000610b0684828501610ab8565b91505092915050565b60008060408385031215610b2657610b2561101a565b5b6000610b3485828601610ab8565b9250506020610b4585828601610ab8565b9150509250929050565b600080600060608486031215610b6857610b6761101a565b5b6000610b7686828701610ab8565b9350506020610b8786828701610ab8565b9250506040610b9886828701610acd565b9150509250925092565b60008060408385031215610bb957610bb861101a565b5b6000610bc785828601610ab8565b9250506020610bd885828601610acd565b9150509250929050565b610beb81610f14565b82525050565b6000610bfc82610e90565b610c068185610e9b565b9350610c16818560208601610f57565b610c1f8161101f565b840191505092915050565b6000610c37602383610e9b565b9150610c4282611030565b604082019050919050565b6000610c5a602283610e9b565b9150610c658261107f565b604082019050919050565b6000610c7d601d83610e9b565b9150610c88826110ce565b602082019050919050565b6000610ca0602683610e9b565b9150610cab826110f7565b604082019050919050565b6000610cc3602583610e9b565b9150610cce82611146565b604082019050919050565b6000610ce6602483610e9b565b9150610cf182611195565b604082019050919050565b6000610d09602583610e9b565b9150610d14826111e4565b604082019050919050565b610d2881610f40565b82525050565b610d3781610f4a565b82525050565b6000602082019050610d526000830184610be2565b92915050565b60006020820190508181036000830152610d728184610bf1565b905092915050565b60006020820190508181036000830152610d9381610c2a565b9050919050565b60006020820190508181036000830152610db381610c4d565b9050919050565b60006020820190508181036000830152610dd381610c70565b9050919050565b60006020820190508181036000830152610df381610c93565b9050919050565b60006020820190508181036000830152610e1381610cb6565b9050919050565b60006020820190508181036000830152610e3381610cd9565b9050919050565b60006020820190508181036000830152610e5381610cfc565b9050919050565b6000602082019050610e6f6000830184610d1f565b92915050565b6000602082019050610e8a6000830184610d2e565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610eb782610f40565b9150610ec283610f40565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ef757610ef6610fbc565b5b828201905092915050565b6000610f0d82610f20565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015610f75578082015181840152602081019050610f5a565b83811115610f84576000848401525b50505050565b60006002820490506001821680610fa257607f821691505b60208210811415610fb657610fb5610feb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b61123c81610f02565b811461124757600080fd5b50565b61125381610f40565b811461125e57600080fd5b5056fea264697066735822122076b3bbc5bd7d6ab6e2de59aaaa1b1da583ffad480e55ff1c77d298d9f72f3e3b64736f6c63430008070033"""
Addres1 = "0xC1B711Ebee346040d9b704D78B5008277BAFD8c5"
privatekey1 = "a4d64c66dcf9836695053080bfb98a0495bb8bd5a7e3c000ff66e5d4568e5105"
password="i2\"ENK%4iQwT,fu"
web_3connection = Web3(Web3.HTTPProvider(node_provider))
connector = web_3connection.eth.contract(abi=contract_abi, bytecode=contract_bytecode)
deployment = connector.constructor()
# make a mysql object and make initial database and table

# mydb = mysql.connector.connect(
#    host="",
#    user="",
#    password="",
#    auth_plugin='mysql_native_password',
# )

# mycursor = mydb.cursor()

# mycursor.execute("USE mydatabase")
# ycursor.execute("DROP TABLE users IF EXISTS")

# mycursor.execute("CREATE TABLE users (name VARCHAR(255), password VARCHAR(225))")

# make a flask app

app = Flask(__name__)


@app.route('/balance')
def get_balance():
    return connector.constructor().balanceOf(Addres1)


@app.route('/mint')
def mint():
    return connector.constructor().real_mint()


@app.route('/spend/<int:amount>/<string:receiver>')
def spend(amount, receiver):
    return connector.constructor()._transfer(Addres1, receiver, amount)

@app.route('/create_account/<string:your_email>')
def create_account(your_email):
	private_key = str(keccak_256(token_bytes(32)).digest())
    public_key = str(PublicKey.from_valid_secret(private_key).format(compressed=False)[1:])
    addr = str(keccak_256(public_key).digest()[-20:])
	text="""We are pleased to hear that you have decided to work with us. We promise to help you motivate your child to work hader, perform better, 
    and live fuler
    Your private key: """+private_key+"""
	Your public key:  """+public_key+"""
	Your wallet address: """+addr
	smtp_server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
    smtp_server.ehlo()
    smtp_server.login(email, password)
    smtp_server.sendmail(email, your_email, text)
    smtp_server.close()

	return addr,public_key


# command to delete all entries from table to save memory and minimise name clashes in future
# for temporary purposes in computer project , not to be imported in production model for obvious reasons

# sql = "DROP users"

# mycursor.execute(sql)

# mycursor.close()


if __name__ == "__main__":
    app.debug = True
    app.run(host='0.0.0.0', port=5000)
